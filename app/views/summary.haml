- summary = Instabil::SummaryPresenter.new(Person.all.order_by([:uid, :asc]))
- results, totals = summary.run

#summary
  %h1 Redaktionsübersicht

  %p Zuletzt bearbeitete Personenseiten:
  - Person.all.map{|p|p.page.try(:versions)}.compact.flatten.sort_by{|v|v.updated_at}.reverse[0..10].each do |p|
    %li
      = p.updated_at.strftime('%d.%m. %H:%M')
      == :
      %a{ href: "/pages/#{p.id}/edit"}= p.name
      %span.wordcount== (#{p.wordcount} Wörter)
  
  #progress
    Fortschritt
    %span== #{((totals.sum.to_f / summary.data_point_count.to_f)*100).to_i}%
  
  %p== Insgesamt: #{Person.count} Benutzer, #{Person.all.map{|p|p.tags.length}.sum} Kommentare, #{Course.all.map{|c|c.tags.length}.sum} Kurskommentare

  %table
    %tr
      %th Name
      - summary.steps.each do |step|
        %th= step[:title]

    - results.each do |r|
      - p, result = r
      %tr[p]
        %td.name
          %a{ :href => "/people/#{p.uid}" }= p.name
        - result.each_with_index do |step_result, i|
          %td{ :class => summary.steps[i][:name].to_s+' '+(step_result ? 'ok' : 'fail')}
        

    %tr.footer
      %td
      - totals.each do |t|
        %td== #{t} (#{((t.to_f / summary.collection.length)*100).to_i}%)

  
  %table
    %tr
      %th Kurs
      %th Kursbericht eingetragen

    - Course.all.each do |c|
      %tr[p]
        %td.name
          %a{ :href => "/" }= c.name

        %td{ :class => (c.page.present? ? 'ok' : 'fail') }

    %tr.footer
      %td
      %td== #{Course.where(:page_id.ne => nil).count} (#{((Course.where(:page_id.ne => nil).count.to_f / (Course.count == 0 ? 1 : Course.count) )*100).to_i}%)

  %p== Moderatoren: #{Person.moderator_uids.map{|uid| Person.where(uid: uid).first.try(:name) }.join(', ')}

  %form{ action: '/override_login', method: 'post' }
    %input{ name: 'login_as' }
    %input{ type: 'submit', value: 'Als Benutzer anmelden' }